// Include the necessary Libraries
#include <ESP8266Wifi.h>
#include <DHT.h>
#include <PubSubClient.h>

// Wifi Connection Credentials
const char* ssid = "ssid"; // Replace with your home ssid
const char* password = "pass"; // Replace with your home ssid pass

// Cloud Adafruit IO Credentials
const char* mqtt_server = "io.adafruit.com";
const char* mqtt_username = "username"; // Replace with your IO Username
const char* mqtt_key = "key"; // Replace with your AIO Key
const char* topic_status = "username/feeds/milk-spoilage.status";
const char* topic_alert = "username/feeds/milk-spoilage.alert";

// Pin Definitions
#define DHTPIN D4
#define DHTTYPE DHT22
#define MQ135PIN A0
#define PHPIN A0
#define RELAY_PIN D2

DHT dht(DHTPIN, DHTTYPE);
WiFiClient espClient;
PubSubClient client(espClient);

// Fuzzy Logic Labels
float temperature, humidity, gas_level, ph_value;
float spoilage_risk = 0;

// Wifi Connection
void setup_wifi() 
{
  delay(10);
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) 
  {
    delay(500);
    Serial.print(".");
  }
  Serial.println("Connected to WiFi");
}
void reconnect() {
  while (!client.connected()) 
  {
    Serial.print("Connecting to MQTT...");
    if (client.connect("ESP8266Client", mqtt_username, mqtt_key)) 
    {
      Serial.println("Connected");
    } 
    else 
    {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" retrying...");
      delay(5000);
    }
  }
}

// Fuzzy Logic Decision Making
float calculateSpoilageRisk(float temp, float humidity, float ph, float gas) 
{
    float risk = 0;

    // Temperature & Humidity
    if (temp >= 10 && humidity >= 80) risk = max(risk, 90);  
    else if (temp >= 10 && humidity >= 50) risk = max(risk, 70);
    else if (temp >= 5 && humidity >= 80) risk = max(risk, 60);
    else if (temp < 5 && humidity >= 50) risk = max(risk, 30);
    else if (temp < 5 && humidity < 50) risk = max(risk, 10);

    // Temperature & pH 
    if (temp >= 10 && ph < 6.5) risk = max(risk, 85);
    else if (temp >= 5 && ph < 6.5) risk = max(risk, 60);
    else if (temp < 5 && ph > 6.5) risk = max(risk, 20);

    // Gas Levels & pH 
    if (gas >= 800 && ph < 6.5) risk = max(risk, 95);
    else if (gas >= 400 && ph < 6.5) risk = max(risk, 80);
    else if (gas < 400 && ph > 6.5) risk = max(risk, 40);

    // Humidity & Gas Levels
    if (humidity >= 80 && gas >= 800) risk = max(risk, 95);
    else if (humidity >= 50 && gas >= 400) risk = max(risk, 70);
    else if (humidity < 50 && gas < 200) risk = max(risk, 30);

    return risk;
}

// UV Sterilization Function
void activateUVSterilization() 
{
    Serial.println("Activating UV Sterilization...");
    digitalWrite(RELAY_PIN, HIGH);  // Turn ON UV
    delay(10000);  // UV runs for 10 sec
    digitalWrite(RELAY_PIN, LOW);  // Turn OFF UV

    // Send Alert to App
    client.publish(topic_alert, "Sterilization done... Consume within 3 days!");
    client.publish(topic_status, "Sterilized!!");
}

// Data Sending
void sendMQTTData() 
{
  client.publish("username/feeds/milk-spoilage.temperature", String(temperature).c_str());
  client.publish("username/feeds/milk-spoilage.humidity", String(humidity).c_str());
  client.publish("username/feeds/milk-spoilage.ph", String(ph_value).c_str());
  client.publish("username/feeds/milk-spoilage.gas", String(gas_level).c_str());
  client.publish("username/feeds/milk-spoilage.risk", String(spoilage_risk).c_str());
}

void setup() 
{
  Serial.begin(115200);
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  dht.begin();
  pinMode(MQ135PIN, INPUT);
  pinMode(PHPIN, INPUT);
  pinMode(RELAY_PIN, OUTPUT);
  digitalWrite(RELAY_PIN, LOW);
}

void loop() 
{
  if (!client.connected()) 
  {
    reconnect();
  }
  client.loop();

  // Sensing of Data
  temperature = dht.readTemperature();
  humidity = dht.readHumidity();
  gas_level = (analogRead(MQ135PIN)*5.0 / 1023.0) * 1000; // Analog value converted to ppm
  ph_value = 7.0 - ((analogRead(PHPIN) - 512.0) * (3.5/512.0)); // Analog value conversion to pH Value
  
  // Fuzzy Logic Decision Making
  spoilage_risk = calculateSpoilageRisk(temperature, humidity, ph_value, gas_level);

  // Display Status
  Serial.print("Temp: "); Serial.print(temperature);
  Serial.print(" Â°C | Humidity: "); Serial.print(humidity);
  Serial.print(" % | pH: "); Serial.print(ph_value);
  Serial.print(" | Gas: "); Serial.print(gas_level);
  Serial.print(" ppm | Spoilage Risk: "); Serial.print(spoilage_risk);
  Serial.println("%");

  // Send Data to MQTT
  sendMQTTData();

  // UV Sterilization
  if (spoilage_risk >= 70) 
  {
    client.publish(topic_status, "At Risk... Sterilization Activate!!");
    activateUVSterilization();
  } 
  else 
  {
    client.publish(topic_status, "Stable State");
  }

  delay(5000);
}
